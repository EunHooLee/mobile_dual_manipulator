// Generated by gencpp from file dxl_gripper/GripperDistRequest.msg
// DO NOT EDIT!


#ifndef DXL_GRIPPER_MESSAGE_GRIPPERDISTREQUEST_H
#define DXL_GRIPPER_MESSAGE_GRIPPERDISTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dxl_gripper
{
template <class ContainerAllocator>
struct GripperDistRequest_
{
  typedef GripperDistRequest_<ContainerAllocator> Type;

  GripperDistRequest_()
    : dist(0.0)  {
    }
  GripperDistRequest_(const ContainerAllocator& _alloc)
    : dist(0.0)  {
  (void)_alloc;
    }



   typedef float _dist_type;
  _dist_type dist;





  typedef boost::shared_ptr< ::dxl_gripper::GripperDistRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dxl_gripper::GripperDistRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GripperDistRequest_

typedef ::dxl_gripper::GripperDistRequest_<std::allocator<void> > GripperDistRequest;

typedef boost::shared_ptr< ::dxl_gripper::GripperDistRequest > GripperDistRequestPtr;
typedef boost::shared_ptr< ::dxl_gripper::GripperDistRequest const> GripperDistRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dxl_gripper::GripperDistRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dxl_gripper::GripperDistRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dxl_gripper::GripperDistRequest_<ContainerAllocator1> & lhs, const ::dxl_gripper::GripperDistRequest_<ContainerAllocator2> & rhs)
{
  return lhs.dist == rhs.dist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dxl_gripper::GripperDistRequest_<ContainerAllocator1> & lhs, const ::dxl_gripper::GripperDistRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dxl_gripper

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dxl_gripper::GripperDistRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dxl_gripper::GripperDistRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dxl_gripper::GripperDistRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dxl_gripper::GripperDistRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dxl_gripper::GripperDistRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dxl_gripper::GripperDistRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dxl_gripper::GripperDistRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4cf5efb292b8e37e249bc3abe7cfd7b3";
  }

  static const char* value(const ::dxl_gripper::GripperDistRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4cf5efb292b8e37eULL;
  static const uint64_t static_value2 = 0x249bc3abe7cfd7b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::dxl_gripper::GripperDistRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dxl_gripper/GripperDistRequest";
  }

  static const char* value(const ::dxl_gripper::GripperDistRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dxl_gripper::GripperDistRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 dist\n"
;
  }

  static const char* value(const ::dxl_gripper::GripperDistRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dxl_gripper::GripperDistRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperDistRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dxl_gripper::GripperDistRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dxl_gripper::GripperDistRequest_<ContainerAllocator>& v)
  {
    s << indent << "dist: ";
    Printer<float>::stream(s, indent + "  ", v.dist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DXL_GRIPPER_MESSAGE_GRIPPERDISTREQUEST_H
