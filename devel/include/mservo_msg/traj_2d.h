// Generated by gencpp from file mservo_msg/traj_2d.msg
// DO NOT EDIT!


#ifndef MSERVO_MSG_MESSAGE_TRAJ_2D_H
#define MSERVO_MSG_MESSAGE_TRAJ_2D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mservo_msg/traj_1d.h>

namespace mservo_msg
{
template <class ContainerAllocator>
struct traj_2d_
{
  typedef traj_2d_<ContainerAllocator> Type;

  traj_2d_()
    : traj_2d()  {
    }
  traj_2d_(const ContainerAllocator& _alloc)
    : traj_2d()  {
  (void)_alloc;
      traj_2d.assign( ::mservo_msg::traj_1d_<ContainerAllocator> (_alloc));
  }



   typedef boost::array< ::mservo_msg::traj_1d_<ContainerAllocator> , 50>  _traj_2d_type;
  _traj_2d_type traj_2d;





  typedef boost::shared_ptr< ::mservo_msg::traj_2d_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mservo_msg::traj_2d_<ContainerAllocator> const> ConstPtr;

}; // struct traj_2d_

typedef ::mservo_msg::traj_2d_<std::allocator<void> > traj_2d;

typedef boost::shared_ptr< ::mservo_msg::traj_2d > traj_2dPtr;
typedef boost::shared_ptr< ::mservo_msg::traj_2d const> traj_2dConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mservo_msg::traj_2d_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mservo_msg::traj_2d_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mservo_msg::traj_2d_<ContainerAllocator1> & lhs, const ::mservo_msg::traj_2d_<ContainerAllocator2> & rhs)
{
  return lhs.traj_2d == rhs.traj_2d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mservo_msg::traj_2d_<ContainerAllocator1> & lhs, const ::mservo_msg::traj_2d_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mservo_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mservo_msg::traj_2d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mservo_msg::traj_2d_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mservo_msg::traj_2d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mservo_msg::traj_2d_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mservo_msg::traj_2d_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mservo_msg::traj_2d_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mservo_msg::traj_2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e758c7f7f248e577c2b0cf954d10ea6";
  }

  static const char* value(const ::mservo_msg::traj_2d_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e758c7f7f248e57ULL;
  static const uint64_t static_value2 = 0x7c2b0cf954d10ea6ULL;
};

template<class ContainerAllocator>
struct DataType< ::mservo_msg::traj_2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mservo_msg/traj_2d";
  }

  static const char* value(const ::mservo_msg::traj_2d_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mservo_msg::traj_2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "traj_1d[50] traj_2d\n"
"\n"
"================================================================================\n"
"MSG: mservo_msg/traj_1d\n"
"float64[7] traj\n"
;
  }

  static const char* value(const ::mservo_msg::traj_2d_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mservo_msg::traj_2d_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.traj_2d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct traj_2d_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mservo_msg::traj_2d_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mservo_msg::traj_2d_<ContainerAllocator>& v)
  {
    s << indent << "traj_2d[]" << std::endl;
    for (size_t i = 0; i < v.traj_2d.size(); ++i)
    {
      s << indent << "  traj_2d[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mservo_msg::traj_1d_<ContainerAllocator> >::stream(s, indent + "    ", v.traj_2d[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSERVO_MSG_MESSAGE_TRAJ_2D_H
