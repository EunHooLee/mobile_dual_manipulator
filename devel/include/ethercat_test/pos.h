// Generated by gencpp from file ethercat_test/pos.msg
// DO NOT EDIT!


#ifndef ETHERCAT_TEST_MESSAGE_POS_H
#define ETHERCAT_TEST_MESSAGE_POS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ethercat_test
{
template <class ContainerAllocator>
struct pos_
{
  typedef pos_<ContainerAllocator> Type;

  pos_()
    : position()  {
      position.assign(0);
  }
  pos_(const ContainerAllocator& _alloc)
    : position()  {
  (void)_alloc;
      position.assign(0);
  }



   typedef boost::array<int32_t, 7>  _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::ethercat_test::pos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ethercat_test::pos_<ContainerAllocator> const> ConstPtr;

}; // struct pos_

typedef ::ethercat_test::pos_<std::allocator<void> > pos;

typedef boost::shared_ptr< ::ethercat_test::pos > posPtr;
typedef boost::shared_ptr< ::ethercat_test::pos const> posConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ethercat_test::pos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ethercat_test::pos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ethercat_test::pos_<ContainerAllocator1> & lhs, const ::ethercat_test::pos_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ethercat_test::pos_<ContainerAllocator1> & lhs, const ::ethercat_test::pos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ethercat_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ethercat_test::pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ethercat_test::pos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ethercat_test::pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ethercat_test::pos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethercat_test::pos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethercat_test::pos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ethercat_test::pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa44e48694f6c8d9c41d364ed0879145";
  }

  static const char* value(const ::ethercat_test::pos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa44e48694f6c8d9ULL;
  static const uint64_t static_value2 = 0xc41d364ed0879145ULL;
};

template<class ContainerAllocator>
struct DataType< ::ethercat_test::pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ethercat_test/pos";
  }

  static const char* value(const ::ethercat_test::pos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ethercat_test::pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[7] position\n"
;
  }

  static const char* value(const ::ethercat_test::pos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ethercat_test::pos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ethercat_test::pos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ethercat_test::pos_<ContainerAllocator>& v)
  {
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.position[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ETHERCAT_TEST_MESSAGE_POS_H
